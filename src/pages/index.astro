---
import Layout from "@layouts/Layout.astro";
import Nav from "@components/Nav.astro";
import Details from "@components/Details.astro";
import BackgroundPattern from "@assets/background.svg";

const frontmatter = {
  title: "Homepage | Services Scroll Interaction",
  description:
    "Welcome to Services Scroll Interaction! Explore our front-end and back-end services with a unique scroll-based interaction that highlights our offerings dynamically.",
};

const mainContent = {
  frontend: {
    topicPrefix: "Front",
    title: "Front End Services",
    items: [
      {
        title: "Creative development",
        description:
          "We create beautiful, functional, and engaging websites that captivate users and drive results. Our team of experts combines creativity with technical expertise to deliver exceptional web experiences.",
      },
      {
        title: "Animation",
        description:
          "Our animation services bring your website to life, adding dynamic elements that enhance user engagement. From subtle transitions to eye-catching effects, we create animations that complement your brand and captivate your audience.",
      },
      {
        title: "Landing pages",
        description:
          "We design and develop high-converting landing pages that drive traffic and generate leads. Our landing pages are optimized for performance, ensuring a seamless user experience that encourages conversions.",
      },
      {
        title: "Performance optimization",
        description:
          "We optimize your website for speed and performance, ensuring fast load times and smooth interactions. Our performance optimization services enhance user experience and improve search engine rankings.",
      },
      {
        title: "Accessibility",
        description:
          "We ensure your website is accessible to all users, including those with disabilities. Our accessibility services comply with WCAG standards, making your website inclusive and user-friendly for everyone.",
      },
      {
        title: "Responsive design",
        description:
          "We create responsive designs that adapt seamlessly to different devices and screen sizes. Our responsive design services ensure your website looks great and functions flawlessly on desktops, tablets, and smartphones.",
      },
      {
        title: "Web development",
        description:
          "We provide comprehensive web development services, from front-end to back-end. Our team builds robust, scalable, and secure websites that meet your business needs and exceed user expectations.",
      },
    ],
  },
  backend: {
    topicPrefix: "Back",
    title: "Back End Services",
    items: [
      {
        title: "API development",
        description:
          "We develop robust APIs that enable seamless communication between your website and external services. Our API development services ensure your website can integrate with third-party applications and platforms.",
      },
      {
        title: "Database management",
        description:
          "We provide database management services to ensure your website's data is organized, secure, and easily accessible. Our team optimizes database performance and implements best practices for data integrity.",
      },
      {
        title: "Server-side scripting",
        description:
          "We create dynamic, server-side scripts that enhance your website's functionality. Our server-side scripting services enable complex interactions and data processing, delivering a rich user experience.",
      },
      {
        title: "Security",
        description:
          "We implement robust security measures to protect your website from threats and vulnerabilities. Our security services include regular audits, vulnerability assessments, and proactive monitoring.",
      },
      {
        title: "Content management systems (CMS)",
        description:
          "We develop and customize content management systems to empower you to manage your website's content easily. Our CMS solutions are user-friendly and scalable, allowing you to grow your online presence effortlessly.",
      },
      {
        title: "E-commerce solutions",
        description:
          "We build secure and scalable e-commerce solutions that drive sales and enhance customer experience. Our e-commerce services include payment gateway integration, product management, and order processing.",
      },
      {
        title: "Cloud services",
        description:
          "We offer cloud services to ensure your website is scalable, reliable, and cost-effective. Our cloud solutions include hosting, storage, and computing resources tailored to your business needs.",
      },
    ],
  },
};
---

<Layout title={frontmatter.title} description={frontmatter.description}>
  <!-- Background pattern is fixed and in the back -->
  <BackgroundPattern
    id="background-svg"
    class="background-svg fixed top-0 right-0 bottom-0 left-0 w-screen h-auto"
  />
  <Nav />
  <!-- Two columns: First one has title/pagination and is sticky -->
  <main class="grow container py-20 grid grid-cols-1 tablet:grid-cols-2 gap-10">
    <!-- 145px is the distance from the top of the page to the sticky first column (nav height + section padding) -->
    <section
      class="sticky top-0 h-[calc(100vh_-_145px)] pt-[145px] -mt-[145px] flex flex-col justify-between"
    >
      <h1
        class="font-extrabold uppercase text-7xl laptop:text-9xl laptop:leading-28 flex flex-col gap-4"
        aria-label="Front End and Back End Services"
      >
        <!-- Will add "animate-swap" class dynamically based on intersection observer -->
        <div class="text-window relative overflow-hidden h-[120px]">
          {
            Object.entries(mainContent).map(([key, content], index) => (
              <span
                id={`topic-header--${key}`}
                class={`absolute bottom-0 left-0 ${index === 0 ? "old-text" : "new-text"}`}
              >
                {[...content.topicPrefix].map(
                  (char: string, charIndex: number) => (
                    <span style={{ "--index": charIndex }}>{char}</span>
                  ),
                )}
              </span>
            ))
          }
        </div>
        End
      </h1>

      <div
        class="page-number-window relative overflow-hidden h-[120px] font-extrabold uppercase text-7xl laptop:text-9xl laptop:leading-28"
      >
        {
          Object.entries(mainContent).map(([key], index) => {
            const pageNum = (index + 1).toString().padStart(2, "0");
            return (
              <span
                id={`page-number--${key}`}
                class={`absolute bottom-0 left-0 ${index === 0 ? "old-text" : "new-text"}`}
              >
                {[...pageNum].map((char: string, charIndex: number) => (
                  <span style={{ "--index": charIndex }}>{char}</span>
                ))}
              </span>
            );
          })
        }
      </div>
    </section>

    <!-- Second column: Content for the page -->
    <section class="p-10 rounded-3xl backdrop-blur-md bg-gray-300/25">
      {
        Object.entries(mainContent).map(([name, content], index) => (
          <>
            <h2
              id={`topic--${name}`}
              class={`text-lg ${index > 0 ? "pt-40" : ""} pb-5 border-b-2 border-gray-300`}
            >
              {content.title}
            </h2>
            {content.items.map((item) => (
              <Details
                name={name}
                title={item.title}
                description={item.description}
              />
            ))}
          </>
        ))
      }
    </section>

    <span class="block col-span-2 pb-80"></span>
  </main>
</Layout>

<script>
  // On scroll, if the "#topic--<name>" element is in view, update the active page number and add the animate-swap class to "text-window"
  const topics = document.querySelectorAll("[id^='topic--']");
  const textWindow = document.querySelector(".text-window");
  const pageNumberWindow = document.querySelector(".page-number-window");

  const handleIntersect = (entries: any, observer: any) => {
    entries.forEach((entry: any) => {
      if (entry.isIntersecting) {
        const intersectingTopicName = entry.target.id.replace("topic--", "");
        const currentDisplayedTopic = document.querySelector(
          ".text-window .old-text",
        );
        const currentDisplayedPageNumber = document.querySelector(
          ".page-number-window .old-text",
        );
        const currentDisplayedTopicName = currentDisplayedTopic?.id.replace(
          "topic-header--",
          "",
        );

        // If the current displayed topic name is the same as the one in view, do nothing
        if (currentDisplayedTopicName === intersectingTopicName) {
          console.log("No change needed, same topic in view.");
          return;
        }

        // If the current displayed topic is different from the one in view
        if (
          currentDisplayedTopic &&
          currentDisplayedPageNumber &&
          textWindow &&
          pageNumberWindow
        ) {
          // Add "animate-swap" class to textWindow and pageNumberWindow
          textWindow.classList.add("animate-swap");
          pageNumberWindow.classList.add("animate-swap");

          // Once the animation is done, swap the old and new text
          setTimeout(() => {
            currentDisplayedTopic.classList.remove("old-text");
            currentDisplayedTopic.classList.add("new-text");
            currentDisplayedPageNumber.classList.remove("old-text");
            currentDisplayedPageNumber.classList.add("new-text");

            const newText = document.getElementById(
              `topic-header--${intersectingTopicName}`,
            );
            const newPageNumber = document.getElementById(
              `page-number--${intersectingTopicName}`,
            );
            if (newText && newPageNumber) {
              newText.classList.remove("new-text");
              newText.classList.add("old-text");
              newPageNumber.classList.remove("new-text");
              newPageNumber.classList.add("old-text");
            }

            // Remove the animate-swap class after the animation is done
            textWindow.classList.remove("animate-swap");
            pageNumberWindow.classList.remove("animate-swap");
          }, 1000); // Match this duration with your CSS animation duration
        }
      }
    });
  };

  const createObserver = () => {
    let observer;

    let options = {
      root: null,
      rootMargin: "10% 0px -65% 0px",
      threshold: 1,
    };

    observer = new IntersectionObserver(handleIntersect, options);
    topics.forEach((topic) => {
      observer.observe(topic);
    });
  };

  createObserver();
</script>

<script>
  // On window blur, add "animation-play-state: paused" to the background SVG
  window.addEventListener("blur", () => {
    const backgroundSvg = document.getElementById("background-svg");
    if (backgroundSvg) {
      backgroundSvg.style.animationPlayState = "paused";
    }
  });

  // On window focus, remove "animation-play-state: paused" from the background SVG
  window.addEventListener("focus", () => {
    const backgroundSvg = document.getElementById("background-svg");
    if (backgroundSvg) {
      backgroundSvg.style.animationPlayState = "running";
    }
  });
</script>

<style>
  .old-text span,
  .new-text span {
    display: inline-block;
  }

  .old-text span {
    opacity: 1;
  }

  .new-text span {
    opacity: 0;
  }

  .animate-swap .old-text span {
    animation: slideOutUp 1s forwards;
    animation-delay: calc(0.05s * var(--index));
  }

  .animate-swap .new-text span {
    animation: slideInUp 1s forwards;
    animation-delay: calc(0.05s * var(--index));
  }

  @keyframes slideOutUp {
    0% {
      transform: translateY(0);
      opacity: 1;
    }
    100% {
      transform: translateY(-100%);
      opacity: 0;
    }
  }

  @keyframes slideInUp {
    0% {
      transform: translateY(100%);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }
</style>
